import groovy.json.*
import java.nio.charset.StandardCharsets
import java.time.*
import java.time.format.*

static Object typeString(String line) {
    Object field
    if(line.matches("([0-9]+\\.[0-9]+)")) {
        if(line.length() <= 20)
            field = Float.parseFloat(line)
        else if(line.length() <= 40)
            field = Double.parseDouble(line)
        else
            field = new BigDecimal(line)
    } else if(line.matches("[0-9]+")) {
        BigInteger val = new BigInteger(line)
        if(val <= Integer.MAX_VALUE)
            field = Integer.parseInt(line)
        else if(val <= Long.MAX_VALUE)
            field = Long.parseLong(line)
        else
            field = val
    } else {
        field = line
    }
    return field
}

static String checkGeneric(def type, def parent, def map, int index) {
    if(index == -1)
        return "super"
    def arr = ((String) parent.getClass()).split("\\.")
    String ptype = arr[arr.length - 1], pname = null
    int idx = -1, pidx = -1
    def cmap = map.get(index)

    for(int i = 0; i < cmap.size(); i++) {
        if (!cmap.get(i).toString().contains(parent.toString()))
            continue

        for(int z = 0; z < cmap.size(); z++) {
            Object elem = cmap.get(i).get(z)
            if (elem == ptype + "<Object>")
                return
            if (elem.toString().contains(ptype)) {
                ptype = elem
                pidx = i
                idx = z
                if(z == 1)
                    pname = cmap.get(i).get(0)
                break
            }
        }
    }
    if(idx < 0 || pidx < 0)
        return

    def pmap = cmap.get(pidx)
    def temp = ptype.split("(>)+[^,]*")[0].split(".*[^a-zA-Z]+")
    ptype = ptype.split("<")[0]
    if(temp.length > 1) {
        if (temp[1] != type) {
            if (ptype.contains("Map"))
                pmap.set(idx, ptype + "<String, Object>")
            else
                pmap.set(idx, ptype + "<Object>")
        }
    } else {
        if(ptype.contains("Map"))
            pmap.set(idx, ptype + "<String, " + type + ">")
        else
            pmap.set(idx, ptype + "<" + type + ">")
    }
    return pname
}

static void elemAdd(Object first, Object second, Object third, def list, def map, def index) {
    list = new ArrayList<>()
    String type = "", name = null
    if(first instanceof String) {
        list.add(first)
        name = first
    }
    if(third instanceof String | third instanceof Number) {
        third = typeString(third.toString())
    } else if(third.size == 0) {
        if(third instanceof Map)
            type = "<String, Object>"
        else
            type = "<Object>"
    }
    String[] arr = ((String) third.getClass()).split("\\.")
    String buffer = type
    type = arr[arr.length - 1].concat(buffer)
    Object parent = list.size() != 0 ? second : first
    String from = checkGeneric(type, parent, map, index - 1)
    list.add(type)

    if(second instanceof Number)
        list.add(second)
    list.add(third)
    if(from != null)
        list.add(from)
    map.get(index).add(list)
}

static void mapAdd(Object data, ArrayList<Object> map, int index) {
    List<Object> list = new ArrayList<>()
    if(index + 1 > map.size()) {
        map.add(list)
    }
    if(data instanceof Map) {
        for(key in data.keySet()) {
            elemAdd(key, data, data.get(key), list, map, index)
        }
    } else if(data instanceof List) {
        for(int i = 0; i < ((ArrayList) data).size(); i++) {
            elemAdd(data, i + "", data.get(i), list, map, index)
        }
    }
}

static void expand(def val, def map, def depth) {
    mapAdd(val, map, depth)
    for(obj in val) {
        if(obj instanceof Map) {
            HashMap<String, Object> json = new JsonSlurperClassic().parseText(new JsonBuilder(obj).toString())
            crawl(json, map, depth + 1)
        }
        if(obj instanceof List) {
            expand(obj, map, depth + 1)
        }
    }
}

static void crawl(def json, def map, def depth) {
    mapAdd(json, map, depth)
    for(val in json.values()) {
        if(val instanceof Map) {
            String temp = new JsonBuilder(val).toString()
            json = new JsonSlurperClassic().parseText(temp)
            crawl(json, map, depth + 1)
        }
        if(val instanceof List) {
            expand(val, map, depth + 1)
        }
    }
}

String[] generate(def map, def class_name, def file) {
    String tab = "    "
    String[] response = new String[4]
    String idMethod = "", idName = ""

    def temp = file.getPath().split("/")
    String filepath = ""
    for(int i = 4; i > 1; i--)
        filepath = filepath.concat(temp[temp.length - i] + "/")
    String comments = \
            "\n/**\n * <b>\n * ANY MODIFICATIONS WILL BE OVERWRITTEN ON BUILD \n" +
            " * </b><p>\n * Autogenerated on: " +
            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)
                    .format(LocalDateTime.now()) + "\n" +
            " * <div>\n * File based on '" + file.name + "'" +
            " located at <a href=\"file://" + file.getPath().split(file.name)[0] + "\">" + filepath + "</a>\n" +
            "*/\n"
    String packag = "package com.example.universitymarket.objects;\n"
    String imports = \
            "\nimport java.util.HashMap;\n" +
            "import java.util.ArrayList;\n"
    String declarations = ""
    String constructor = \
            "\n" + tab + "public " + class_name + "(HashMap<String, Object> rawdata) {\n"
    String methods = ""

    println(
            "__________________________________________________\n" +
            "\tGenerating class from " + file.name + "\n" +
            "=================================================="
    )
    for(int pass = 0; pass < 3; pass++) {
        boolean ubh = false
        for (int i = 0; i < map.size(); i++) {
            for (int z = 0; z < map.get(i).size(); z++) {
                def cmap = map.get(i).get(z)
                int csize = cmap.size()

                if (csize < 4)
                    continue

                temp = ((String) cmap.get(1).toString()).split("^[^<]+")
                String name = cmap.get(0), type = cmap.get(1), data = cmap.get(2), prov = cmap.get(3)
                String generic = temp.size() > 1 ? temp[1] : "", mname = ""
                temp = name.split("[^a-zA-Z0-9]")
                for (ss in temp) {
                    int size = ss.size()
                    if (size > 0)
                        mname = mname.concat(ss.charAt(0).toUpperCase().toString())
                    if (size > 1)
                        mname = mname.concat(ss.substring(1))
                }

                switch(pass) {
                    case 0:
                        println(cmap)
                        if (i == 0) {
                            if(type == "String") {
                                idName = name
                                idMethod = mname
                            }
                            constructor = constructor.concat(
                                    tab + tab + "super.put(\"" + name + "\", rawdata.get(\"" + name + "\"));\n"
                            )
                        }
                        declarations = declarations.concat(
                                tab + "private " + type + " " + name + " = null;\n"
                        )
                        methods = methods.concat(
                                "\n\n" + tab + "public " + type + " get" +
                                        mname + "() { return " + name + "; }"
                        )
                        break
                    case 1:
                        constructor = constructor.concat(
                                tab + tab + name + " = (" + type + ") " + prov + ".get(\"" + name + "\");\n"
                        )

                        if (generic == "<HashMap>") {
                            ubh = true
                            declarations = declarations.concat(
                                    tab + "private HashMap<String, Object> " + name + "Map = new HashMap<>();\n"
                            )
                            methods = methods.concat(
                                    "\n\n" + tab + "public HashMap<String, Object> get" +
                                            mname + "Map() { return " + name + "Map; }"
                            )
                        }
                        break
                    case 2:
                        if (prov == "super") {
                            methods = methods.concat(
                                    "\n\n" + tab + "public void set" +
                                            mname + "(" + type + " " + name + ") { super.put(\"" +
                                            name + "\", " + name + "); }"
                            )
                        }
                        if (generic == "<HashMap>") {
                            constructor = constructor.concat(
                                    "\n" + tab + tab + "for(Object o : " + name + ") {\n" +
                                            tab + tab + tab + "Data.mergeHash(" + name + "Map, (HashMap<String, Object>) o);\n" +
                                            tab + tab + "}\n"
                            )
                        }
                }
            }
            if(pass == 0)
                println()
        }
        if(pass == 1 && ubh)
            imports = imports.concat("import com.example.universitymarket.utilities.Data;\n")
    }
    constructor = constructor.concat(tab + "}")
    methods = methods.concat("\n\n" + tab + "public HashMap<String, Object> getSuper() { return this; }")

    String body = declarations + constructor + methods
    String definition = \
            "public class " + class_name + " extends HashMap<String, Object> {\n" +
            body + "\n}"
    String object = packag + imports + comments + definition
    response[0] = new String(object)

    boolean cache = file.name.contains("cached")
    String coll_name = "\"" + class_name.toLowerCase() + "s\""
    String obj_name = class_name.toLowerCase() + "OBJ"
    String setters = ""
    String getters = ""
    if(cache) {
        setters = setters.concat(
                "\n    public static void set" + class_name + "FromCache" +
                "(@NonNull Activity cur_act, @NonNull String docID, boolean clear, @Nullable NetListener<" + class_name + "> response) {\n" +
                "        Task<HashMap<String, Object>> echo = setDoc(cur_act, " + coll_name + ", docID, clear);\n" +
                "        if(response != null) {\n" +
                "            echo.addOnSuccessListener(task -> {\n" +
                "                " + class_name + " result = new " + class_name + "(task);\n" +
                "                response.onSuccess(result);\n" +
                "            });\n" +
                "            echo.addOnFailureListener(response::onFailure);\n" +
                "        }\n" +
                "    }\n\n" +
                \
                "    public static void set" + class_name + "FromCache" +
                "(@NonNull Activity cur_act, boolean clear, @Nullable NetListener<" + class_name + "> response) {\n" +
                "        Task<HashMap<String, Object>> echo = setDoc(cur_act, " + coll_name + ", Active" + class_name + "." + idName + ", clear);\n" +
                "        if(response != null) {\n" +
                "            echo.addOnSuccessListener(task -> {\n" +
                "                " + class_name + " result = new " + class_name + "(task);\n" +
                "                response.onSuccess(result);\n" +
                "            });\n" +
                "            echo.addOnFailureListener(response::onFailure);\n" +
                "        }\n" +
                "    }\n\n" +
                \
                "    public static void set" + class_name + "sFromCache" +
                "(@NonNull Activity cur_act, boolean clear, @Nullable NetListener<List<" + class_name + ">> response) {\n" +
                "        File[] files = Data.getCachedFiles(cur_act, " + coll_name + ");\n" +
                "        List<" + class_name + "> responses = new ArrayList<>();\n" +
                "        for(int i = 0; i < files.length; i++) {\n" +
                "            Task<HashMap<String, Object>> echo = setDoc(cur_act, " + coll_name + ", files[i].getName().split(\"(.json)\")[0], clear);\n" +
                "            if(response != null) {\n" +
                "                echo.addOnFailureListener(response::onFailure);\n" +
                "                if(i == files.length - 1) {\n" +
                "                    echo.addOnSuccessListener(task -> {\n" +
                "                        " + class_name + " result = new " + class_name + "(task);\n" +
                "                        responses.add(result);\n" +
                "                        response.onSuccess(responses);\n" +
                "                    });\n" +
                "                } else {\n" +
                "                    echo.addOnSuccessListener(task -> {\n" +
                "                    " + class_name + " result = new " + class_name + "(task);\n" +
                "                    responses.add(result);\n" +
                "                    });\n" +
                "                }\n" +
                "            }\n" +
                "        }\n" +
                "    }\n"
        )
        getters = getters.concat(
                "\n    public static void sync" +  class_name  + "Cache(@NonNull Activity cur_act) {\n" +
                "        getDoc(cur_act, " + coll_name + ", Active" +  class_name  + "." + idName + ")\n" +
                "                .addOnSuccessListener(task -> {\n" +
                "                    " +  class_name  + " result = new " +  class_name  + "(task);\n" +
                "                    Data.setActive" +  class_name  + "(result, null);\n" +
                "                    Data.setCache(cur_act, task, false);\n" +
                "                })\n" +
                "                .addOnFailureListener(e -> Toast.makeText(\n" +
                "                        cur_act,\n" +
                "                        e.getMessage(),\n" +
                "                        Toast.LENGTH_SHORT\n" +
                "                ).show());\n" +
                "    }\n"
        )
    }
    setters = setters.concat(
            "\n    public static void set" + class_name + "(@NonNull Activity cur_act, @NonNull " + class_name + " " + obj_name + ", boolean clear, @Nullable NetListener<" + class_name + "> response) {\n" +
            "        if(response == null && " + obj_name + ".get" + idMethod + "() == null)\n" +
            "            return;\n" +
            "        else if(response != null && " + obj_name + ".get" + idMethod + "() == null) {\n" +
            "            response.onFailure(new NullPointerException(\"" + class_name + " ID does not exist in " + class_name.toLowerCase() + " object \" + " + obj_name + "));\n" +
            "            return;\n" +
            "        }\n" +
            "        Task<HashMap<String, Object>> echo = setDoc(cur_act," + coll_name + ", " + obj_name + ".get" + idMethod + "(), clear, " + obj_name + ");\n" +
            "        if(response != null) {\n" +
            "            echo.addOnSuccessListener(task -> {\n" +
            "                " + class_name + " result = new " + class_name + "(task);\n" +
            "                response.onSuccess(result);\n" +
            "            });\n" +
            "            echo.addOnFailureListener(response::onFailure);\n" +
            "        }\n" +
            "    }\n\n" +
            \
            "    public static void set" + class_name + "s(@NonNull Activity cur_act, @NonNull " + class_name + "[] " + obj_name + ", boolean clear, @Nullable NetListener<List<" + class_name + ">> response) {\n" +
            "        List<" + class_name + "> responses = new ArrayList<>();\n" +
            "        for(int i = 0; i < " + obj_name + ".length; i++) {\n" +
            "            if(response == null && " + obj_name + "[i].get" + idMethod + "() == null)\n" +
            "                continue;\n" +
            "            else if(response != null && " + obj_name + "[i].get" + idMethod + "() == null) {\n" +
            "                response.onFailure(new NullPointerException(\"" + class_name + " ID does not exist in " + class_name.toLowerCase() + " object \" + " + obj_name + "[i]));\n" +
            "                continue;\n" +
            "            }\n" +
            "            Task<HashMap<String, Object>> echo = setDoc(cur_act," + coll_name + ", " + obj_name + "[i].get" + idMethod + "(), clear, " + obj_name + "[i]);\n" +
            "            if(response != null) {\n" +
            "                echo.addOnFailureListener(response::onFailure);\n" +
            "                if(i == " + obj_name + ".length - 1) {\n" +
            "                    echo.addOnSuccessListener(task -> {\n" +
            "                        " + class_name + " result = new " + class_name + "(task);\n" +
            "                        responses.add(result);\n" +
            "                        response.onSuccess(responses);\n" +
            "                    });\n" +
            "                } else {\n" +
            "                    echo.addOnSuccessListener(task -> {\n" +
            "                        " + class_name + " result = new " + class_name + "(task);\n" +
            "                        responses.add(result);\n" +
            "                    });\n" +
            "                }\n" +
            "            }\n" +
            "        }\n" +
            "    }\n"
    )
    getters = getters.concat(
            "\n    public static void get" +  class_name  + "(@NonNull Activity cur_act, @NonNull String docID, @NonNull NetListener<" +  class_name  + "> response) {\n" +
            "        getDoc(cur_act," +  coll_name  + ", docID)\n" +
            "                .addOnSuccessListener(task -> {\n" +
            "                    " +  class_name  + " result = new " +  class_name  + "(task);\n" +
            "                    response.onSuccess(result);\n" +
            "                })\n" +
            "                .addOnFailureListener(response::onFailure);\n" +
            "    }\n\n" +
            \
            "    public static void get" +  class_name  + "s(@NonNull Activity cur_act, @NonNull String[] docID, @NonNull NetListener<List<" +  class_name  + ">> response) {\n" +
            "        List<" +  class_name  + "> list = new ArrayList<>();\n" +
            "        for(int i = 0; i < docID.length; i++) {\n" +
            "            Task<HashMap<String, Object>> echo = getDoc(cur_act," +  coll_name  + ", docID[i]);\n" +
            "            echo.addOnFailureListener(response::onFailure);\n" +
            "            if(i == docID.length - 1) {\n" +
            "                echo.addOnSuccessListener(task -> {\n" +
            "                    " +  class_name  + " result = new " +  class_name  + "(task);\n" +
            "                    list.add(result);\n" +
            "                    response.onSuccess(list);\n" +
            "                });\n" +
            "            } else {\n" +
            "                echo.addOnSuccessListener(task -> {\n" +
            "                    " +  class_name  + " result = new " +  class_name  + "(task);\n" +
            "                    list.add(result);\n" +
            "                });\n" +
            "            }\n" +
            "        }\n" +
            "    }\n\n" +
            \
            "    public static void get" +  class_name  + "s(@NonNull Activity cur_act, @NonNull Filter filter, int pageNo, @NonNull NetListener<List<" +  class_name  + ">> response) {\n" +
            "        List<" +  class_name  + "> list = new ArrayList<>();\n" +
            "        getColl(cur_act," +  coll_name  + ", filter, Math.max(pageNo, 0))\n" +
            "                .addOnSuccessListener(task -> {\n" +
            "                    for (HashMap<String, Object> hash : task) {\n" +
            "                        " +  class_name  + " result = new " +  class_name  + "(hash);\n" +
            "                        list.add(result);\n" +
            "                    }\n" +
            "                    response.onSuccess(list);\n" +
            "                })\n" +
            "                .addOnFailureListener(response::onFailure);\n" +
            "    }\n\n" +
            \
            "    public static void get" +  class_name  + "s(@NonNull Activity cur_act, int pageNo, @NonNull NetListener<List<" +  class_name  + ">> response) {\n" +
            "        List<" +  class_name  + "> list = new ArrayList<>();\n" +
            "        getColl(cur_act," +  coll_name  + ", null, (char) (Math.max(pageNo, 0)))\n" +
            "                .addOnSuccessListener(task -> {\n" +
            "                    for (HashMap<String, Object> hash : task) {\n" +
            "                        " +  class_name  + " result = new " +  class_name  + "(hash);\n" +
            "                        list.add(result);\n" +
            "                    }\n" +
            "                    response.onSuccess(list);\n" +
            "                })\n" +
            "                .addOnFailureListener(response::onFailure);\n" +
            "    }\n"
    )
    response[1] = setters + getters

    packag = "package com.example.universitymarket.globals;\n"
    imports = imports.concat("import android.app.Application;\n")
    declarations = declarations.replace("private", "public static")
    methods = \
            "\n" + tab + "@Override\n" +
            tab + "public void onCreate() {\n" +
            tab + tab + "super.onCreate();\n" +
            tab + "}\n"
    body = declarations + methods
    definition = \
            "public class Active" + class_name + " extends Application {\n" +
            body + "\n}"
    object = packag + imports + comments + definition
    response[2] = new String(object)

    String details = ""
    temp = declarations.split("\n")
    for(line in temp) {
        line = line.replace("    public static ", "")
        line = line.replace("HashMap<String, ", "HashMap<String,")
        def buff = line.split("( )")
        String type = buff[0], name = buff[1]
        details = details.concat(
                "        Active" + class_name + "." + name + " = (" + type + ") pojo.get(\"" + name + "\");\n"
        )
    }
    String method = \
            "\n\n    public static void setActive" + class_name + "(Map<String, Object> pojo, String json) {\n" +
            "        if(json != null) {\n" +
            "            pojo = jsonToPOJO(json);\n" +
            "        }\n" + details +
            "    }"
    response[3] = method

    return response
}

void update(String nString, String dString, def active_names, def obj_names, def utility_path) {
    String redc_comments_top = \
            "\n/**\n * <b>\n * ANY MODIFICATIONS ABOVE THESE JAVADOC BOUNDS WILL BE OVERWRITTEN ON BUILD \n" +
            " * <div>\n * DO NOT REMOVE THIS \n" +
            " * </b><p>\n * Autogenerated on: " +
            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)
                    .format(LocalDateTime.now()) + "\n" +
            "*/\n"
    String redc_comments_bottom = \
            "\n/**\n * <b>\n * ANY MODIFICATIONS BELOW THESE JAVADOC BOUNDS WILL BE OVERWRITTEN ON BUILD \n" +
            " * <div>\n * DO NOT REMOVE THIS \n" +
            " * </b><p>\n * Autogenerated on: " +
            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)
                    .format(LocalDateTime.now()) + "\n" +
            "*/\n"

    String header_obj = "package com.example.universitymarket.utilities;\n\n"
    String header_active = "package com.example.universitymarket.utilities;\n\n"
    if(active_names.size() > 0)
        header_obj = header_obj.concat("import android.widget.Toast;\n")
    for(val in obj_names)
        header_obj = header_obj.concat("import com.example.universitymarket.objects." + val + ";\n")
    for(val in active_names) {
        header_obj = header_obj.concat("import com.example.universitymarket.globals." + val + ";\n")
        header_active = header_active.concat("import com.example.universitymarket.globals." + val + ";\n")
    }

    for(int i = 0; i < 2; i++) {
        if((i == 0 ? nString : dString).size() != 0) {
            InputStream inp = new FileInputStream(utility_path.getAbsolutePath() + (i == 0 ? "/Network.java" : "/Data.java"));
            BufferedReader reader = new BufferedReader(new InputStreamReader(inp, StandardCharsets.UTF_8));
            StringBuilder data = new StringBuilder();

            String line = reader.readLine();

            while(!line.contains("*\\/")) {
                line = reader.readLine();
            }
            while(!line.contains("/**")) {
                data.append(line).append("\n");
                line = reader.readLine();
            }
            inp.close()
            new File(utility_path, (i == 0 ? "Network.java" : "Data.java")).write(
                    (i == 0 ? header_obj : header_active) + redc_comments_top + data.toString() + redc_comments_bottom + (i == 0 ? nString : dString)  + "\n}"
            )
        }
    }
}

task generateSupported {
    File[] skeletons = file("${project.projectDir}/src/main/res/raw").listFiles()
    Map<String, File> skeleton_map = new HashMap<>()
    File object_path = file("${project.projectDir}/src/main/java/com/example/universitymarket/objects")
    File global_path = file("${project.projectDir}/src/main/java/com/example/universitymarket/globals")
    File utility_path = file("${project.projectDir}/src/main/java/com/example/universitymarket/utilities")
    List<String> active_names = new ArrayList<>()
    List<String> obj_names = new ArrayList<>()
    for (s in skeletons) {
        String temp = s.getName().split("(_skeleton)(_cached)?(\\.json)")[0]
        StringBuilder name = new StringBuilder()
                .append(temp.charAt(0).toUpperCase())
                .append(temp.substring(1, temp.length()))
                .append(".java")
        skeleton_map.put(name.toString(), s)
    }
    String nString = "", dString = ""

    for (sn in skeleton_map.keySet()) {
        String name = sn.split("\\.")[0]
        obj_names.add(name)
        List<Object> map = new ArrayList<>()
        HashMap<String, Object> json = new JsonSlurperClassic().parseText(skeleton_map.get(sn).text)
        crawl(json, map, 0)

        String[] generated = generate(map, name, skeleton_map.get(sn))
        new File(object_path, sn).write(generated[0])
        nString = nString.concat(generated[1])
        if(skeleton_map.get(sn).name.matches(".*(_cached\\.json)")) {
            active_names.add("Active" + name)
            new File(global_path, "Active" + sn).write(generated[2])
            dString = dString.concat(generated[3])
        }
    }
    update(nString, dString, active_names, obj_names, utility_path)
}